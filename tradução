Adaptador

O adaptador é um padrão de design estrutural que permite que objetos com interfaces incompatíveis colaborem.

problema

Imagine que você está criando um aplicativo de monitoramento do mercado de ações. O aplicativo baixa os dados de ações de várias fontes no formato XML e, em seguida, exibe gráficos e diagramas bonitos para o usuário.

Em algum momento, você decide melhorar o aplicativo integrando uma biblioteca de análise inteligente de terceiros. Mas há um problema: a biblioteca de análise só funciona com dados no formato JSON.

Você pode alterar a biblioteca para trabalhar com XML. No entanto, isso pode interromper algum código existente que depende da biblioteca. E pior, você pode não ter acesso ao código-fonte da biblioteca em primeiro lugar, tornando essa abordagem impossível.

Solução
Você pode criar um adaptador. Este é um objeto especial que converte a interface de um objeto para que outro objeto possa entendê-lo.

Um adaptador encapsula um dos objetos para ocultar a complexidade da conversão que ocorre nos bastidores. O objeto encapsulado nem mesmo está ciente do adaptador. Por exemplo, você pode encapsular um objeto que opera em metros e quilômetros com um adaptador que converte todos os dados em unidades imperiais, como pés e milhas.

Os adaptadores podem não apenas converter dados em vários formatos, mas também ajudar objetos com diferentes interfaces a colaborar. Veja como funciona:

O adaptador recebe uma interface, compatível com um dos objetos existentes.
Usando essa interface, o objeto existente pode chamar com segurança os métodos do adaptador.
Ao receber uma chamada, o adaptador passa a solicitação para o segundo objeto, mas em um formato e ordem que o segundo objeto espera.
Às vezes, é até possível criar um adaptador bidirecional que possa converter as chamadas em ambas as direções.

Vamos voltar ao nosso aplicativo de mercado de ações. Para resolver o dilema de formatos incompatíveis, você pode criar adaptadores XML para JSON para cada classe da biblioteca de análise com a qual seu código trabalha diretamente. Em seguida, você ajusta seu código para se comunicar com a biblioteca somente por meio desses adaptadores. Quando um adaptador recebe uma chamada, ele converte os dados XML de entrada em uma estrutura JSON e passa a chamada para os métodos apropriados de um objeto de análise encapsulado.


Analogia do mundo real

Ao viajar dos EUA para a Europa pela primeira vez, você pode ter uma surpresa ao tentar carregar seu laptop. Os padrões de plugue e soquetes de alimentação são diferentes em diferentes países. É por isso que seu plugue americano não cabe em uma tomada alemã. O problema pode ser resolvido usando um adaptador de plugue de alimentação que tenha o soquete de estilo americano e o plugue de estilo europeu.

 Estrutura

Essa implementação usa o princípio de composição do objeto: o adaptador implementa a interface de um objeto e encapsula o outro. Ele pode ser implementado em todas as linguagens de programação populares.

Adaptador de classe
Essa implementação usa herança: o adaptador herda interfaces de ambos os objetos ao mesmo tempo. Observe que essa abordagem só pode ser implementada em linguagens de programação que dão suporte a várias heranças, como C++.

#Pseudocódigo
Este exemplo do padrão Adaptador é baseado no conflito clássico entre pinos quadrados e furos redondos.

O Adaptador finge ser um pino redondo, com um raio igual à metade do diâmetro do quadrado (em outras palavras, o raio do menor círculo que pode acomodar o pino quadrado).

// Say you have two classes with compatible interfaces:
// RoundHole and RoundPeg.
class RoundHole is
    constructor RoundHole(radius) { ... }

    method getRadius() is
        // Return the radius of the hole.

    method fits(peg: RoundPeg) is
        return this.getRadius() >= peg.getRadius()

class RoundPeg is
    constructor RoundPeg(radius) { ... }

    method getRadius() is
        // Return the radius of the peg.


// But there's an incompatible class: SquarePeg.
class SquarePeg is
    constructor SquarePeg(width) { ... }

    method getWidth() is
        // Return the square peg width.


// An adapter class lets you fit square pegs into round holes.
// It extends the RoundPeg class to let the adapter objects act
// as round pegs.
class SquarePegAdapter extends RoundPeg is
    // In reality, the adapter contains an instance of the
    // SquarePeg class.
    private field peg: SquarePeg

    constructor SquarePegAdapter(peg: SquarePeg) is
        this.peg = peg

    method getRadius() is
        // The adapter pretends that it's a round peg with a
        // radius that could fit the square peg that the adapter
        // actually wraps.
        return peg.getWidth() * Math.sqrt(2) / 2


// Somewhere in client code.
hole = new RoundHole(5)
rpeg = new RoundPeg(5)
hole.fits(rpeg) // true

small_sqpeg = new SquarePeg(5)
large_sqpeg = new SquarePeg(10)
hole.fits(small_sqpeg) // this won't compile (incompatible types)

small_sqpeg_adapter = new SquarePegAdapter(small_sqpeg)
large_sqpeg_adapter = new SquarePegAdapter(large_sqpeg)
hole.fits(small_sqpeg_adapter) // true
hole.fits(large_sqpeg_adapter) // false (FROM https://refactoring.guru/design-patterns/adapter)


Aplicabilidade
 Use a classe Adapter quando quiser usar alguma classe existente, mas sua interface não for compatível com o restante do código.

 O padrão Adapter permite criar uma classe de camada intermediária que serve como um tradutor entre seu código e uma classe herdada, uma classe de terceiros ou qualquer outra classe com uma interface estranha.

 Use o padrão quando quiser reutilizar várias subclasses existentes que não possuem alguma funcionalidade comum que não pode ser adicionada à superclasse.

 Você pode estender cada subclasse e colocar a funcionalidade ausente em novas classes filhas. No entanto, você precisará duplicar o código em todas essas novas classes, o que cheira muito mal.

A solução muito mais elegante seria colocar a funcionalidade ausente em uma classe de adaptador. Em seguida, você encapsularia objetos com recursos ausentes dentro do adaptador, obtendo os recursos necessários dinamicamente. Para que isso funcione, as classes de destino devem ter uma interface comum e o campo do adaptador deve seguir essa interface. Essa abordagem é muito semelhante ao padrão Decorator.

Como implementar
Certifique-se de ter pelo menos duas classes com interfaces incompatíveis:

Uma classe de serviço útil, que você não pode alterar (geralmente de terceiros, legada ou com muitas dependências existentes).
Uma ou várias classes de cliente que se beneficiariam do uso da classe de serviço.
Declare a interface do cliente e descreva como os clientes se comunicam com o serviço.

Crie a classe do adaptador e faça com que ela siga a interface do cliente. Deixe todos os métodos vazios por enquanto.

Adicione um campo à classe do adaptador para armazenar uma referência ao objeto de serviço. A prática comum é inicializar esse campo por meio do construtor, mas às vezes é mais conveniente passá-lo para o adaptador ao chamar seus métodos.

Um por um, implemente todos os métodos da interface do cliente na classe do adaptador. O adaptador deve delegar a maior parte do trabalho real ao objeto de serviço, manipulando apenas a interface ou a conversão de formato de dados.

Os clientes devem usar o adaptador por meio da interface do cliente. Isso permitirá que você altere ou estenda os adaptadores sem afetar o código do cliente.

 Prós e contras
 Princípio de Responsabilidade Única. Você pode separar a interface ou o código de conversão de dados da lógica de negócios primária do programa.
 Princípio Aberto/Fechado. Você pode introduzir novos tipos de adaptadores no programa sem quebrar o código do cliente existente, desde que eles funcionem com os adaptadores por meio da interface do cliente.
 A complexidade geral do código aumenta porque você precisa introduzir um conjunto de novas interfaces e classes. Às vezes, é mais simples apenas alterar a classe de serviço para que ela corresponda ao restante do código.
 Relações com outros padrões
O Bridge geralmente é projetado antecipadamente, permitindo que você desenvolva partes de um aplicativo independentemente umas das outras. Por outro lado, o Adapter é comumente usado com um aplicativo existente para fazer com que algumas classes incompatíveis funcionem bem juntas.

O adaptador fornece uma interface completamente diferente para acessar um objeto existente. Por outro lado, com o padrão Decorator, a interface permanece a mesma ou é estendida. Além disso, o Decorator dá suporte à composição recursiva, o que não é possível quando você usa o Adaptador.

Com o Adaptador, você acessa um objeto existente por meio de uma interface diferente. Com o Proxy, a interface permanece a mesma. Com o Decorator, você acessa o objeto por meio de uma interface aprimorada.

O Facade define uma nova interface para objetos existentes, enquanto o Adapter tenta tornar a interface existente utilizável. O Adapter geralmente envolve apenas um objeto, enquanto o Facade trabalha com um subsistema inteiro de objetos.

Ponte, Estado, Estratégia (e até certo ponto Adaptador) têm estruturas muito semelhantes. De fato, todos esses padrões são baseados na composição, que é delegar trabalho a outros objetos. No entanto, todos eles resolvem problemas diferentes. Um padrão não é apenas uma receita para estruturar seu código de uma maneira específica. Ele também pode comunicar a outros desenvolvedores o problema que o padrão resolve.

essa tradução foi realizada com com base no site  https://refactoring.guru/design-patterns/adapter

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Builder é um padrão de design criacional,  no qual você constrói um complexo de objetos passo a passo.
Padrões te guiam por diferentes tipos de representações do qual um objeto do mesmo tipo é construído.

Problema:
Imagine um complexo objeto no qual demande muito trabalho, passo a passo a inicialização de muitos campos aninhados a esse objeto. tal inicialização do código é usualmente estressante dentro de um construtor monstruoso com um monte de parâmetros. Ou pior ainda: espalhar o código por todo o cliente.

Por exemplo, vamos pensar como criar um objeto do tipo casa. para construir uma casa simples,você precisa de um construtor para as paredes e o piso, instalar a porta, colocar as janelas e construir o telhado. Mas e se você desejar uma grande, iluminada casa, com um jardim e outras comodidades(como sistema de aquecimento, encanamento e fiação elétrica)?

Uma solução simples é extender a base de compreensão da classe HOUSE, além da criação de subclasses para sustentar a combinação dos parâmetros. Mas eventualmente você vai precisar considerar um numero expressivo de subclasses. Um parâmetro qualquer, com o aumento da hierarquia sera mais exigente.

Há outra abordagem que não envolve a criação de subclasses. Você pode criar um construtor gigante diretamente na classe base HOUSE com todos os parâmetros possíveis que controlam o objeto HOUSE. Embora essa abordagem realmente elimine a necessidade de subclasses, ela cria outro problema.

Na maioria dos casos os parâmetros serão inutilizados, fazendo que o construtor fiquem bem feias. Por exemplo, apenas uma fração das casas tem piscinas, então os parâmetros relacionados a piscinas serão inúteis nove em cada dez vezes.

:) Solução

O padrão Builder sugere que você extraia o código de construção do objeto de sua própria classe e o mova para objetos separados chamados construtores.

O padrão organiza a criação e organização de um objeto em etapas(BuildWalls,BuildDoor,etc). Para criar um objeto, você executa uma serie de etapas para criar o objeto. A parte importante é que você não precisa fazer a chamada que cada etapa. você pode apenas utilizar aquelas que forem necessárias para a sua produção particular do objeto.

Algum dos passos dos construtores precisam de uma requisição diferente na hora da implementação no qual você precise criar varias representações do produto. Por exemplo,As paredes de uma cabana podem ser construídas de madeira, mas as paredes do castelo devem ser construídas com pedra.

Neste caso, você pode criar varias classes Builders diferentes que implementam o mesmo conjunto de etapas de construção, mas de uma maneira diferente. então você pode esses Builders no processo de construção(ou seja, um conjunto ordenado de chamadas para as etapas de construção) para produzir diferentes tipos de objetos.

Por exemplo ,imagine um Builder que constrói qualquer coisa com madeira e vidro, a segunda que esse construtor faz é construir qualquer coisa com pedra e a terceira utilizando ouro e diamantes . Ao chamar e inicializar os passos, você tem uma casa do primeiro construtor, um castelo pequeno do segundo e um palacio do terceiro construtor. De qualquer modo ,isso apenas funcionara se o cliente chamar os passos para interagir com o construtor usando uma interface em comum.

Diretor
Você pode ir além e extrair uma série de chamadas para os passos do builder que você usa para construir um produto em uma classe separada chamada director. A classe director define a ordem na qual executar os passos de construção, enquanto o builder fornece a implementação para essas passos.

Ter uma classe diretora em seu programa não é estritamente necessário. Você sempre pode chamar os passos de construção em uma ordem específica diretamente do código do cliente. No entanto, a classe diretora pode ser um bom lugar para colocar várias rotinas de construção para que você possa reutilizá-las em seu programa.

Além disso, a classe diretora oculta completamente os detalhes da construção do produto do código do cliente. O cliente só precisa associar um construtor a um diretor, iniciar a construção com o diretor e obter o resultado do construtor.

#pseudocode 
Esse exemplo de construtor padrão ilustra como você pode reutilizar o mesmo objeto construído no seu código usando diferentes tipos de produtos ,como carros,e criar um correspondente para eles.

Um carro é um objeto complexo que pode ser construído de centenas de maneiras diferentes. Em vez de inchar a classe Car com um construtor enorme, extraímos o código de montagem do carro em uma classe separada de construtor de carros. Esta classe tem um conjunto de métodos para configurar várias partes de um carro.

Se o código do cliente precisar montar um modelo especial e ajustado de um carro, ele pode trabalhar diretamente com o construtor. Por outro lado, o cliente pode delegar a montagem para a classe diretora, que sabe como usar um construtor para construir vários dos modelos mais populares de carros.

Você pode ficar chocado, mas todo carro precisa de um manual (sério, quem os lê?). O manual descreve cada recurso do carro, então os detalhes nos manuais variam entre os diferentes modelos. É por isso que faz sentido reutilizar um processo de construção existente para carros reais e seus respectivos manuais. Claro, construir um manual não é o mesmo que construir um carro, e é por isso que devemos fornecer outra classe de construtor especializada em compor manuais. Esta classe implementa os mesmos métodos de construção que seu irmão de construção de carros, mas em vez de criar peças de carros, ela as descreve. Ao passar esses construtores para o mesmo objeto diretor, podemos construir um carro ou um manual.

A parte final é buscar o objeto resultante. Um carro de metal e um manual de papel, embora relacionados, ainda são coisas muito diferentes. Não podemos colocar um método para buscar resultados no diretor sem acoplar o diretor a classes de produtos concretas. Portanto, obtemos o resultado da construção do construtor que realizou o trabalho.

// Using the Builder pattern makes sense only when your products
// are quite complex and require extensive configuration. The
// following two products are related, although they don't have
// a common interface.
class Car is
    // A car can have a GPS, trip computer and some number of
    // seats. Different models of cars (sports car, SUV,
    // cabriolet) might have different features installed or
    // enabled.

class Manual is
    // Each car should have a user manual that corresponds to
    // the car's configuration and describes all its features.


// The builder interface specifies methods for creating the
// different parts of the product objects.
interface Builder is
    method reset()
    method setSeats(...)
    method setEngine(...)
    method setTripComputer(...)
    method setGPS(...)

// The concrete builder classes follow the builder interface and
// provide specific implementations of the building steps. Your
// program may have several variations of builders, each
// implemented differently.
class CarBuilder implements Builder is
    private field car:Car

    // A fresh builder instance should contain a blank product
    // object which it uses in further assembly.
    constructor CarBuilder() is
        this.reset()

    // The reset method clears the object being built.
    method reset() is
        this.car = new Car()

    // All production steps work with the same product instance.
    method setSeats(...) is
        // Set the number of seats in the car.

    method setEngine(...) is
        // Install a given engine.

    method setTripComputer(...) is
        // Install a trip computer.

    method setGPS(...) is
        // Install a global positioning system.

    // Concrete builders are supposed to provide their own
    // methods for retrieving results. That's because various
    // types of builders may create entirely different products
    // that don't all follow the same interface. Therefore such
    // methods can't be declared in the builder interface (at
    // least not in a statically-typed programming language).
    //
    // Usually, after returning the end result to the client, a
    // builder instance is expected to be ready to start
    // producing another product. That's why it's a usual
    // practice to call the reset method at the end of the
    // `getProduct` method body. However, this behavior isn't
    // mandatory, and you can make your builder wait for an
    // explicit reset call from the client code before disposing
    // of the previous result.
    method getProduct():Car is
        product = this.car
        this.reset()
        return product

// Unlike other creational patterns, builder lets you construct
// products that don't follow the common interface.
class CarManualBuilder implements Builder is
    private field manual:Manual

    constructor CarManualBuilder() is
        this.reset()

    method reset() is
        this.manual = new Manual()

    method setSeats(...) is
        // Document car seat features.

    method setEngine(...) is
        // Add engine instructions.

    method setTripComputer(...) is
        // Add trip computer instructions.

    method setGPS(...) is
        // Add GPS instructions.

    method getProduct():Manual is
        // Return the manual and reset the builder.


// The director is only responsible for executing the building
// steps in a particular sequence. It's helpful when producing
// products according to a specific order or configuration.
// Strictly speaking, the director class is optional, since the
// client can control builders directly.
class Director is
    // The director works with any builder instance that the
    // client code passes to it. This way, the client code may
    // alter the final type of the newly assembled product.
    // The director can construct several product variations
    // using the same building steps.
    method constructSportsCar(builder: Builder) is
        builder.reset()
        builder.setSeats(2)
        builder.setEngine(new SportEngine())
        builder.setTripComputer(true)
        builder.setGPS(true)

    method constructSUV(builder: Builder) is
        // ...


// The client code creates a builder object, passes it to the
// director and then initiates the construction process. The end
// result is retrieved from the builder object.
class Application is

    method makeCar() is
        director = new Director()

        CarBuilder builder = new CarBuilder()
        director.constructSportsCar(builder)
        Car car = builder.getProduct()

        CarManualBuilder builder = new CarManualBuilder()
        director.constructSportsCar(builder)

        // The final product is often retrieved from a builder
        // object since the director isn't aware of and not
        // dependent on concrete builders and products.
        Manual manual = builder.getProduct()//from (https://refactoring.guru/design-patterns/builder)

// O diretor é responsável apenas por executar as etapas de construção em uma sequência particular. É útil ao produzir
// produtos de acordo com uma ordem ou configuração específica. Resumindo, a classe do diretor é opcional, pois o código do cliente pode controlar os construtores diretamente.
class

Aplicabilidade 
Use o padrão Builder para se livrar de um “construtor telescópico”

Diga que você tem um construtor com dez parâmetros opcionais,Chamar tal fera é muito inconveniente; portanto, você sobrecarrega o construtor e cria várias versões mais curtas com menos parâmetros. Esses construtores ainda se referem ao principal, passando alguns valores padrões para quaisquer parâmetros omitidos.

""class Pizza {
    Pizza(int size) { ... }
    Pizza(int size, boolean cheese) { ... }
    Pizza(int size, boolean cheese, boolean pepperoni) { ... }
    // ..."" from(https://refactoring.guru/design-patterns/builder).

Certifique-se de que você possa definir claramente as etapas de construção comuns para criar todas as representações de produtos disponíveis. Caso contrário, você não poderá prosseguir com a implementação do padrão.

Declare essas etapas na interface do construtor base.

Crie uma classe de construtor de concreto para cada uma das representações do produto e implemente suas etapas de construção.

Não se esqueça de implementar um método para buscar o resultado da construção. O motivo pelo qual esse método não pode ser declarado dentro da interface do construtor é que vários construtores podem construir produtos que não têm uma interface comum. Portanto, você não sabe qual seria o tipo de retorno para esse método. No entanto, se você estiver lidando com produtos de uma única hierarquia, o método de busca poderá ser adicionado com segurança à interface base.

Pense em criar uma classe de diretor. Ele pode encapsular várias maneiras de construir um produto usando o mesmo objeto de construtor.

O código do cliente cria os objetos builder e director. Antes do início da construção, o cliente deve passar um objeto construtor para o diretor. Normalmente, o cliente faz isso apenas uma vez, por meio de parâmetros do construtor de classe do diretor. O diretor usa o objeto builder em todas as construções posteriores. Existe uma abordagem alternativa, em que o construtor é passado para um método específico de construção de produto do diretor.

O resultado da construção pode ser obtido diretamente do diretor somente se todos os produtos seguirem a mesma interface. Caso contrário, o cliente deve buscar o resultado do construtor.

 Prós e contras
 Você pode construir objetos passo a passo, adiar etapas de construção ou executar etapas recursivamente.
 Você pode reutilizar o mesmo código de construção ao criar várias representações de produtos.
 Princípio de Responsabilidade Única. Você pode isolar o código de construção complexo da lógica de negócios do produto.
 A complexidade geral do código aumenta, pois o padrão requer a criação de várias novas classes.
 Relações com outros padrões
Muitos projetos começam usando o Método de Fábrica (menos complicado e mais personalizável por meio de subclasses) e evoluem para Fábrica Abstrata, Protótipo ou Construtor (mais flexível, mas mais complicado).

O Builder se concentra na construção de objetos complexos passo a passo. A Abstract Factory é especializada na criação de famílias de objetos relacionados. O Abstract Factory retorna o produto imediatamente, enquanto o Builder permite que você execute algumas etapas de construção adicionais antes de buscar o produto.

Você pode usar o Builder ao criar árvores compostas complexas porque pode programar suas etapas de construção para funcionar recursivamente.

Você pode combinar Builder com Bridge: a classe director desempenha o papel de abstração, enquanto diferentes builders atuam como implementações.

Fábricas abstratas, construtores e protótipos podem ser implementados como Singletons.

essa tradução foi realizada com com base no site https://refactoring.guru/design-patterns/builder .


////////////////////////////////////////////////////////////////////////////////////////////////////
	


Iterator

Propósito
O Iterator é um padrão de projeto comportamental que permite a você percorrer elementos de uma coleção sem expor as representações dele (lista, pilha, árvore, etc.)

Problema
Coleções são um dos tipos de dados mais usados em programação. Não obstante, uma coleção é apenas um contêiner para um grupo de objetos.

A maioria das coleções armazena seus elementos em listas simples. Contudo, alguns deles são baseados em pilhas, árvores, grafos, e outras estruturas complexas de dados.

Mas independente de quão complexa uma coleção é estruturada, ela deve fornecer uma maneira de acessar seus elementos para que outro código possa usá-los. Deve haver uma maneira de ir de elemento em elemento na coleção sem ter que acessar os mesmos elementos repetidamente.

Isso parece uma tarefa fácil se você tem uma coleção baseada numa lista. Você faz um loop em todos os elementos. Mas como você faz a travessia dos elementos de uma estrutura de dados complexas sequencialmente, tais como uma árvore. Por exemplo, um dia você pode apenas precisar percorrer em profundidade em uma árvore. No dia seguinte você pode precisar percorrer na amplitude. E na semana seguinte, você pode precisar algo diferente, como um acesso aleatório aos elementos da árvore.

Adicionando mais e mais algoritmos de travessia para uma coleção gradualmente desfoca sua responsabilidade primária, que é um armazenamento de dados eficiente. Além disso, alguns algoritmos podem ser feitos para aplicações específicas, então incluí-los em uma coleção genérica pode ser estranho.

Por outro lado, o código cliente que deveria trabalhar com várias coleções pode não se importar com a maneira que elas armazenam seus elementos. Contudo, uma vez que todas as coleções fornecem diferentes maneiras de acessar seus elementos, você não tem outra opção além de acoplar seu código com as classes de coleções específicas.

 Solução
A ideia principal do padrão Iterator é extrair o comportamento de travessia de uma coleção para um objeto separado chamado um iterador.

Além de implementar o algoritmo em si, um objeto iterador encapsula todos os detalhes da travessia, tais como a posição atual e quantos elementos faltam para chegar ao fim. Por causa disso, alguns iteradores podem averiguar a mesma coleção ao mesmo tempo, independentemente um do outro.

Geralmente, os iteradores fornecem um método primário para pegar elementos de uma coleção. O cliente pode manter esse método funcionando até que ele não retorne mais nada, o que significa que o iterador atravessou todos os elementos.

Todos os iteradores devem implementar a mesma interface. Isso faz que o código cliente seja compatível com qualquer tipo de coleção ou qualquer algoritmo de travessia desde que haja um iterador apropriado. Se você precisar de uma maneira especial para a travessia de uma coleção, você só precisa criar uma nova classe iterador, sem ter que mudar a coleção ou o cliente.

Analogia com o mundo real
Você planeja visitar Roma por alguns dias e visitar todas suas principais atrações e pontos de interesse. Mas uma vez lá, você poderia gastar muito tempo andando em círculos, incapaz de achar até mesmo o Coliseu.

Por outro lado, você pode comprar um guia virtual na forma de app para seu smartphone e usá-lo como navegação. É inteligente e barato, e você pode ficar em lugares interessantes por quanto tempo quiser.

Uma terceira alternativa é gastar um pouco da verba da viagem e contratar um guia local que conhece a cidade como a palma de sua mão. O guia poderia ser capaz de criar um passeio que se adeque a seus gostos, mostrar todas as atrações, e contar um monte de histórias interessantes. Isso seria mais divertido, mas, infelizmente, mais caro também.

Todas essas opções—direções aleatórias criadas em sua cabeça, o navegador do smartphone, ou o guia humano—agem como iteradores sobre a vasta coleção de locais e atrações de Roma.

#Pseudocódigo
Neste exemplo, o padrão Iterator é usado para percorrer uma coleção especial que encapsula acesso ao grafo social do Facebook. A coleção fornece vários iteradores que podem percorrer perfis de várias maneiras.

O iterador ‘amigos’ pode ser usado para verificar os amigos de um dado perfil. O iterador 'colegas’ faz a mesma coisa, exceto por omitir amigos que não trabalham na mesma companhia como uma pessoa alvo. Ambos iteradores implementam uma interface comum que permite os clientes recuperar os perfis sem mergulhar nos detalhes de implementação como autenticação e pedidos REST.

O código cliente não está acoplado à classes concretas porque funciona com coleções e iteradores somente através de interfaces. Se você decidir conectar sua aplicação com uma nova rede social, você simplesmente precisa fornecer as novas classes de iteração e coleção sem mudar o código existente.

// The collection interface must declare a factory method for
// producing iterators. You can declare several methods if there
// are different kinds of iteration available in your program.
interface SocialNetwork is
    method createFriendsIterator(profileId):ProfileIterator
    method createCoworkersIterator(profileId):ProfileIterator


// Each concrete collection is coupled to a set of concrete
// iterator classes it returns. But the client isn't, since the
// signature of these methods returns iterator interfaces.
class Facebook implements SocialNetwork is
    // ... The bulk of the collection's code should go here ...

    // Iterator creation code.
    method createFriendsIterator(profileId) is
        return new FacebookIterator(this, profileId, "friends")
    method createCoworkersIterator(profileId) is
        return new FacebookIterator(this, profileId, "coworkers")


// The common interface for all iterators.
interface ProfileIterator is
    method getNext():Profile
    method hasMore():bool


// The concrete iterator class.
class FacebookIterator implements ProfileIterator is
    // The iterator needs a reference to the collection that it
    // traverses.
    private field facebook: Facebook
    private field profileId, type: string

    // An iterator object traverses the collection independently
    // from other iterators. Therefore it has to store the
    // iteration state.
    private field currentPosition
    private field cache: array of Profile

    constructor FacebookIterator(facebook, profileId, type) is
        this.facebook = facebook
        this.profileId = profileId
        this.type = type

    private method lazyInit() is
        if (cache == null)
            cache = facebook.socialGraphRequest(profileId, type)

    // Each concrete iterator class has its own implementation
    // of the common iterator interface.
    method getNext() is
        if (hasMore())
            result = cache[currentPosition]
            currentPosition++
            return result

    method hasMore() is
        lazyInit()
        return currentPosition < cache.length


// Here is another useful trick: you can pass an iterator to a
// client class instead of giving it access to a whole
// collection. This way, you don't expose the collection to the
// client.
//
// And there's another benefit: you can change the way the
// client works with the collection at runtime by passing it a
// different iterator. This is possible because the client code
// isn't coupled to concrete iterator classes.
class SocialSpammer is
    method send(iterator: ProfileIterator, message: string) is
        while (iterator.hasMore())
            profile = iterator.getNext()
            System.sendEmail(profile.getEmail(), message)


// The application class configures collections and iterators
// and then passes them to the client code.
class Application is
    field network: SocialNetwork
    field spammer: SocialSpammer

    method config() is
        if working with Facebook
            this.network = new Facebook()
        if working with LinkedIn
            this.network = new LinkedIn()
        this.spammer = new SocialSpammer()

    method sendSpamToFriends(profile) is
        iterator = network.createFriendsIterator(profile.getId())
        spammer.send(iterator, "Very important message")

    method sendSpamToCoworkers(profile) is
        iterator = network.createCoworkersIterator(profile.getId())
        spammer.send(iterator, "Very important message") //FROM (https://refactoring.guru/design-patterns/iterator)

Aplicabilidade
 Utilize o padrão Iterator quando sua coleção tiver uma estrutura de dados complexa por debaixo dos panos, mas você quer esconder a complexidade dela de seus clientes (seja por motivos de conveniência ou segurança).

 O iterador encapsula os detalhes de se trabalhar com uma estrutura de dados complexa, fornecendo ao cliente vários métodos simples para acessar os elementos da coleção. Embora essa abordagem seja muito conveniente para o cliente, ela também protege a coleção de ações descuidadas ou maliciosas que o cliente poderia fazer se estivesse trabalhando com as coleções diretamente.

 Utilize o padrão para reduzir a duplicação de código de travessia em sua aplicação.

 O código de algoritmos de iteração não triviais tendem a ser muito pesados. Quando colocados dentro da lógica de negócio da aplicação, ele pode desfocar a responsabilidade do codigo original e torná-lo um código de difícil manutenção. Mover o código de travessia para os iteradores designados pode ajudar você a tornar o código da aplicação mais enxuto e limpo.

 Utilize o Iterator quando você quer que seu código seja capaz de percorrer diferentes estruturas de dados ou quando os tipos dessas estruturas são desconhecidos de antemão.

 O padrão fornece um par de interfaces genérica tanto para coleções como para iteradores. Já que seu código agora usa essas interfaces, ele ainda vai funcionar se você passar diversos tipos de coleções e iteradores que implementam essas interfaces.

 Como implementar
Declare a interface do iterador. Ao mínimo, ela deve ter um método para buscar o próximo elemento de uma coleção. Mas por motivos de conveniência você pode adicionar alguns outros métodos, tais como recuperar o elemento anterior, saber a posição atual, e checar o fim da iteração.

Declare a interface da coleção e descreva um método para buscar iteradores. O tipo de retorno deve ser igual à interface do iterador. Você pode declarar métodos parecidos se você planeja ter grupos distintos de iteradores.

Implemente classes iterador concretas para as coleções que você quer percorrer com iteradores. Um objeto iterador deve ser ligado com uma única instância de coleção. Geralmente esse link é estabelecido através do construtor do iterador.

Implemente a interface da coleção na suas classes de coleção. A ideia principal é fornecer ao cliente com um atalho para criar iteradores, customizados para uma classe coleção em particular. O objeto da coleção deve passar a si mesmo para o construtor do iterador para estabelecer um link entre eles.

Vá até o código cliente e substitua todo o código de travessia de coleção com pelo uso de iteradores. O cliente busca um novo objeto iterador a cada vez que precisa iterar sobre os elementos de uma coleção.

 Prós e contras
 Princípio de responsabilidade única. Você pode limpar o código cliente e as coleções ao extrair os pesados algoritmos de travessia para classes separadas.
 Princípio aberto/fechado. Você pode implementar novos tipos de coleções e iteradores e passá-los para o código existente sem quebrar coisa alguma.
 Você pode iterar sobre a mesma coleção em paralelo porque cada objeto iterador contém seu próprio estado de iteração.
 Pelas mesmas razões, você pode atrasar uma iteração e continuá-la quando necessário.
 Aplicar o padrão pode ser um preciosismo se sua aplicação só trabalha com coleções simples.
 Usar um iterador pode ser menos eficiente que percorrer elementos de algumas coleções especializadas diretamente.
 Relações com outros padrões
Você pode usar Iteradores para percorrer árvores Composite.

Você pode usar o Factory Method junto com o Iterator para permitir que uma coleção de subclasses retornem diferentes tipos de iteradores que são compatíveis com as coleções.

Você pode usar o Memento junto com o Iterator para capturar o estado de iteração atual e revertê-lo se necessário.

Você pode usar o Visitor junto com o Iterator para percorrer uma estrutura de dados complexas e executar alguma operação sobre seus elementos, mesmo se eles todos tenham classes 
diferentes.

essa tradução foi realizada com com base no site  https://refactoring.guru/pt-br/design-patterns/iterator



